---
import Logo from "@/components/core/Logo.astro";
import ThemeToggle from "@/components/core/ThemeToggle.astro";
import menu from "@/config/menu.json";

export interface ChildNavigationLink {
  name: string;
  url: string;
}

export interface NavigationLink {
  name: string;
  url: string;
  hasChildren?: boolean;
  children?: ChildNavigationLink[];
}

const { main }: { main: NavigationLink[] } = menu;
const { pathname } = Astro.url;
---

<header class="header">
  <nav class="navbar container">
    <!-- logo -->
    <div class="order-0">
      <Logo src="/images/logo-blue.png" />
    </div>
    <!-- navbar toggler -->
    <input id="nav-toggle" type="checkbox" class="hidden" />
    <label
      id="show-button"
      for="nav-toggle"
      class="order-2 flex cursor-pointer items-center lg:order-1 lg:hidden mr-6"
    >
      <svg class="h-6 fill-current" viewBox="0 0 20 20">
        <title>Menu Open</title>
        <path d="M0 3h20v2H0V3z m0 6h20v2H0V9z m0 6h20v2H0V0z"></path>
      </svg>
    </label>
    <label
      id="hide-button"
      for="nav-toggle"
      class="order-2 hidden cursor-pointer items-center lg:order-1 mr-6"
    >
      <svg class="h-6 fill-current" viewBox="0 0 20 20">
        <title>Menu Close</title>
        <polygon
          points="11 9 22 9 22 11 11 11 11 22 9 22 9 11 -2 11 -2 9 9 9 9 -2 11 -2"
          transform="rotate(45 10 10)"></polygon>
      </svg>
    </label>
    <!-- /navbar toggler -->

    <ul
      id="nav-menu"
      class="navbar-nav order-3 hidden w-full lg:order-1 lg:flex lg:w-auto lg:space-x-2 "
    >
      {
        main.map((menu) => (
          <>
            {menu.hasChildren ? (
              <li class="nav-item nav-dropdown group relative cursor-pointer dropdown-button">
                <span
                  class={`nav-link inline-flex items-center ${
                    menu.children?.map(({ url }) => url).includes(pathname) ||
                    menu.children
                      ?.map(({ url }) => `${url}/`)
                      .includes(pathname)
                      ? "active"
                      : ""
                  }`}
                >
                  {menu.name}
                  <svg class="h-4 w-4 fill-current" viewBox="0 0 20 20">
                    <path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z" />
                  </svg>
                </span>
                <ul
                  id="dropdown"
                  class="nav-dropdown-list"
                >
                  {menu.children?.map((child) => (
                    <li class="nav-dropdown-item">
                      <a
                        href={child.url}
                        class={`nav-dropdown-link block ${
                          (pathname === `${child.url}/` ||
                            pathname === child.url) &&
                          "text-secondary"
                        }`}
                      >
                        {child.name}
                      </a>
                    </li>
                  ))}
                </ul>
              </li>
            ) : (
              <li class="nav-item">
                <a
                  href={menu.url}
                  class={`nav-link inline-block lg:block ${
                    (pathname === `${menu.url}/` || pathname === menu.url) &&
                    "active"
                  }`}
                >
                  {menu.name}
                </a>
              </li>
            )}
          </>
        ))
      }
    </ul>
    <div class="order-1 ml-auto absolute right-3 top-3 items-center md:order-2 md:ml-0 lg:relative lg:right-0 lg:flex lg:top-0">
    </div>
  </header>
</nav>

{Astro.url.pathname === '/' && (
<div class="inset-x-0 z-50">
    <div class="bg-info">
        <div class="mx-auto max-w-7xl py-3 px-3 sm:px-6 lg:px-8">
            <div class="flex flex-col items-center justify-between lg:flex-row lg:justify-center">
                <div class="flex flex-1 items-center lg:mr-3 lg:flex-none">
                    <p class="ml-3 text-center font-medium text-white">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2"
                            stroke="currentColor" aria-hidden="true" class="mr-2 hidden h-6 w-6 lg:inline">
                            <path stroke-linecap="round" stroke-linejoin="round"
                                d="M11 5.882V19.24a1.76 1.76 0 01-3.417.592l-2.147-6.15M18 13a3 3 0 100-6M5.436 13.683A4.001 4.001 0 017 6h1.832c4.1 0 7.625-1.234 9.168-3v14c-1.543-1.766-5.067-3-9.168-3H7a3.988 3.988 0 01-1.564-.317z">
                            </path>
                        </svg>Interested in trying out for CCDC?
                    </p>
                </div>
                <div class="mt-2 w-full flex-shrink-0 lg:mt-0 lg:w-auto">
                    <a class="flex items-center justify-center rounded-md border border-transparent bg-white px-4 py-2 text-sm font-medium text-primary shadow-sm hover:bg-teal-50"
                        href="/tryouts">Details
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>
)}

<script is:inline>
  function initDropdownListeners() {
    document.querySelectorAll(".dropdown-button").forEach((button) => {
      const dropdown = button.closest(".nav-dropdown");
      function toggleDropdown(e) {
        e.stopPropagation(); // Evitar eventos innecesarios
        dropdown.classList.toggle("open");

        // Cierra otros dropdowns abiertos
        document.querySelectorAll(".nav-dropdown").forEach((otherDropdown) => {
          if (otherDropdown !== dropdown) {
            otherDropdown.classList.remove("open");
          }
        });
      }
      button.removeEventListener("click", toggleDropdown);
      button.addEventListener("click", toggleDropdown);
    });
  }
  // Asegura que los eventos se reasignen después de cada navegación
  document.addEventListener("astro:page-load", () => {
    initDropdownListeners();
  });
</script>
